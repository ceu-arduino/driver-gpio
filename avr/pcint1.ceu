input none PCINT1;

// PORT 1/C
// Uno:  A0-A5
// Mega: D0,D15,D14

#if   defined(ARDUINO_BOARD_UNO)
#define PCINT1_DDR  DDRC
#define PCINT1_PORT PORTC
#define PCINT1_PIN  PINC
#elif defined(ARDUINO_BOARD_MEGA)
#define PCINT1_DDR  DDRE
#define PCINT1_PORT PORTE
#define PCINT1_PIN  PINE
#else
#error Board not supported.
#endif

output (on/off v, int pcint) PCINT1_ENABLE do
    if v then
        {
            bitClear(PCINT1_DDR, @pcint);  // input
            bitSet(PCINT1_PORT, @pcint);   // pullup
            bitSet(PCMSK1, @pcint);  // interrupt enable
        }
    else
        {
            bitClear(PCMSK1, @pcint);
        }
    end
end

output (int pcint, &high/low v) PCINT1_GET do
    v = _bitRead({PCINT1_PIN}, pcint) as bool;
end

native/const _PCINT1_vect;

{
    bitSet(PCICR,  PCIE1);  // enables port 1
}

spawn async/isr [_PCINT1_vect, 0] do
    emit PCINT1;
end

code/call PCINT1_Read (none) -> u8 do
    var u8 cur = 0;
    var int bit;
    loop bit in [_PCINT8 -> _PCINT14] do    // TODO: _PCINT15 not available on UNO?
        var high/low v = _;
        emit PCINT1_GET(bit, &v);
        _bitWrite(cur, bit, v);
    end
    escape cur;
end

code/await PCINT1_One (none) -> (event (int,high/low) e) -> NEVER do
    var u8 old = call PCINT1_Read();
    loop do
        await PCINT1;
        var u8 cur = call PCINT1_Read();
        var u8 dif = cur ^ old;
        old = cur;
        var int bit;
        loop bit in [_PCINT8 -> _PCINT14] do
            if _bitRead(dif,bit) == 1 then
                emit e(bit, (_bitRead(cur,bit) as high/low));
            end
        end
    end
end
