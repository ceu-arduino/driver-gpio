#ifndef GPIO_CEU
#define GPIO_CEU

input  (int,high/low) PIN_IN;
output (int,high/low) PIN_OUT;

// Also, each pin may be individually used as `input` or `output`.
// An `output` pin must be declared first, e.g.:
//  output high/low PIN_13;
//  emit PIN_13(high);
// An `input` pin must include a driver first:
//  #include "pin_02.ceu"
//  await PIN_02;

#if 0
output high/low PIN_XX;     // declare PIN_XX as output
#endif

// TODO: move to "pin_xx.ceu"
#if 0
                            // use PIN_XX as input
#define PIN_00 do                                       \
    var int pin_xxx;                                    \
    var high/low v_xxx;                                 \
    (pin_xxx,v_xxx) = await PIN_IN until pin_xxx==0;    \
    escape v_xxx;                                       \
end

#define PIN_01 do                                       \
    var int pin_xxx;                                    \
    var high/low v_xxx;                                 \
    (pin_xxx,v_xxx) = await PIN_IN until pin_xxx==1;    \
    escape v_xxx;                                       \
end

#define PIN_05 do                                       \
    var int pin_xxx;                                    \
    var high/low v_xxx;                                 \
    (pin_xxx,v_xxx) = await PIN_IN until pin_xxx==5;    \
    escape v_xxx;                                       \
end

#define PIN_06 do                                       \
    var int pin_xxx;                                    \
    var high/low v_xxx;                                 \
    (pin_xxx,v_xxx) = await PIN_IN until pin_xxx==6;    \
    escape v_xxx;                                       \
end

#define PIN_07 do                                       \
    var int pin_xxx;                                    \
    var high/low v_xxx;                                 \
    (pin_xxx,v_xxx) = await PIN_IN until pin_xxx==7;    \
    escape v_xxx;                                       \
end

#define PIN_08 do                                       \
    var int pin_xxx;                                    \
    var high/low v_xxx;                                 \
    (pin_xxx,v_xxx) = await PIN_IN until pin_xxx==8;    \
    escape v_xxx;                                       \
end

#define PIN_09 do                                       \
    var int pin_xxx;                                    \
    var high/low v_xxx;                                 \
    (pin_xxx,v_xxx) = await PIN_IN until pin_xxx==9;    \
    escape v_xxx;                                       \
end

#define PIN_11 do                                       \
    var int pin_xxx;                                    \
    var high/low v_xxx;                                 \
    (pin_xxx,v_xxx) = await PIN_IN until pin_xxx==1;    \
    escape v_xxx;                                       \
end

#define PIN_12 do                                       \
    var int pin_xxx;                                    \
    var high/low v_xxx;                                 \
    (pin_xxx,v_xxx) = await PIN_IN until pin_xxx==2;    \
    escape v_xxx;                                       \
end

#define PIN_13 do                                       \
    var int pin_xxx;                                    \
    var high/low v_xxx;                                 \
    (pin_xxx,v_xxx) = await PIN_IN until pin_xxx==3;    \
    escape v_xxx;                                       \
end
#endif

native/pos do
    ##define ceu_callback_output_PIN_OUT(ps,trace) {            \\
        tceu_output_PIN_OUT* ps_ = (tceu_output_PIN_OUT*) ps;   \\
        digitalWrite(ps_->_1, ps_->_2);                         \\
    }

    ##define ceu_callback_output_PIN_00(ps,trace) digitalWrite( 0, *((bool*)ps))
    ##define ceu_callback_output_PIN_01(ps,trace) digitalWrite( 1, *((bool*)ps))
    ##define ceu_callback_output_PIN_02(ps,trace) digitalWrite( 2, *((bool*)ps))
    ##define ceu_callback_output_PIN_03(ps,trace) digitalWrite( 3, *((bool*)ps))
    ##define ceu_callback_output_PIN_04(ps,trace) digitalWrite( 4, *((bool*)ps))
    ##define ceu_callback_output_PIN_05(ps,trace) digitalWrite( 5, *((bool*)ps))
    ##define ceu_callback_output_PIN_06(ps,trace) digitalWrite( 6, *((bool*)ps))
    ##define ceu_callback_output_PIN_07(ps,trace) digitalWrite( 7, *((bool*)ps))
    ##define ceu_callback_output_PIN_08(ps,trace) digitalWrite( 8, *((bool*)ps))
    ##define ceu_callback_output_PIN_09(ps,trace) digitalWrite( 9, *((bool*)ps))
    ##define ceu_callback_output_PIN_10(ps,trace) digitalWrite(10, *((bool*)ps))
    ##define ceu_callback_output_PIN_11(ps,trace) digitalWrite(11, *((bool*)ps))
    ##define ceu_callback_output_PIN_12(ps,trace) digitalWrite(12, *((bool*)ps))
    ##define ceu_callback_output_PIN_13(ps,trace) digitalWrite(13, *((bool*)ps))

    ##define ceu_callback_output_PWM_00(ps,trace) analogWrite( 0, *((u8*)ps))
    ##define ceu_callback_output_PWM_01(ps,trace) analogWrite( 1, *((u8*)ps))
    ##define ceu_callback_output_PWM_02(ps,trace) analogWrite( 2, *((u8*)ps))
    ##define ceu_callback_output_PWM_03(ps,trace) analogWrite( 3, *((u8*)ps))
    ##define ceu_callback_output_PWM_04(ps,trace) analogWrite( 4, *((u8*)ps))
    ##define ceu_callback_output_PWM_05(ps,trace) analogWrite( 5, *((u8*)ps))
    ##define ceu_callback_output_PWM_06(ps,trace) analogWrite( 6, *((u8*)ps))
    ##define ceu_callback_output_PWM_07(ps,trace) analogWrite( 7, *((u8*)ps))
    ##define ceu_callback_output_PWM_08(ps,trace) analogWrite( 8, *((u8*)ps))
    ##define ceu_callback_output_PWM_09(ps,trace) analogWrite( 9, *((u8*)ps))
    ##define ceu_callback_output_PWM_00(ps,trace) analogWrite(10, *((u8*)ps))
    ##define ceu_callback_output_PWM_01(ps,trace) analogWrite(11, *((u8*)ps))
    ##define ceu_callback_output_PWM_02(ps,trace) analogWrite(12, *((u8*)ps))
    ##define ceu_callback_output_PWM_03(ps,trace) analogWrite(13, *((u8*)ps))
end

{
##ifdef _CEU_OUTPUT_PIN_00_
    pinMode( 0, OUTPUT);
##endif
##ifdef _CEU_OUTPUT_PIN_01_
    pinMode( 1, OUTPUT);
##endif
##ifdef _CEU_OUTPUT_PIN_02_
    pinMode( 2, OUTPUT);
##endif
##ifdef _CEU_OUTPUT_PIN_03_
    pinMode( 3, OUTPUT);
##endif
##ifdef _CEU_OUTPUT_PIN_04_
    pinMode( 4, OUTPUT);
##endif
##ifdef _CEU_OUTPUT_PIN_05_
    pinMode( 5, OUTPUT);
##endif
##ifdef _CEU_OUTPUT_PIN_06_
    pinMode( 6, OUTPUT);
##endif
##ifdef _CEU_OUTPUT_PIN_07_
    pinMode( 7, OUTPUT);
##endif
##ifdef _CEU_OUTPUT_PIN_08_
    pinMode( 8, OUTPUT);
##endif
##ifdef _CEU_OUTPUT_PIN_09_
    pinMode( 9, OUTPUT);
##endif
##ifdef _CEU_OUTPUT_PIN_10_
    pinMode(10, OUTPUT);
##endif
##ifdef _CEU_OUTPUT_PIN_11_
    pinMode(11, OUTPUT);
##endif
##ifdef _CEU_OUTPUT_PIN_12_
    pinMode(12, OUTPUT);
##endif
##ifdef _CEU_OUTPUT_PIN_13_
    pinMode(13, OUTPUT);
##endif
}

#endif
